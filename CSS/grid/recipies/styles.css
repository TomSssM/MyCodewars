.container1 {
  display: grid;
  /* 2 rows of 50px high / 4 equal columns */
  grid-template: repeat(2, 70px) / repeat(4, 1fr);
}

.container2 {
  display: grid;
  /* it's better to set implicit rows instead in case we
  accidentally create new rows that are not specified in
  the grid-template property */
  grid-template-columns: repeat(2, 1fr);

  /* this: */
  grid-auto-rows: 70px;
  /* instead of this: */
  /* grid-template-rows: repeat(2, 70px); */
}

.container3 {
  /* -1 to span all the way to the right (seemingly not left though) */
  display: grid;
  grid-template: 70px 200px 70px / repeat(12, 1fr);
  /* or use the commented out code below instead */
  grid-template-areas:
    'm m m m h h h h h h h h'
    'm m m m c c c c c c c c'
    'f f f f f f f f f f f f';
}
.container3 .item1 {
  grid-area: h;
  /* grid-column: 5 / -1; */
}
.container3 .item2 {
  grid-area: m;
  /* grid-row: 1 / 3; */
  /* grid-column: 1 / 5; */
}
.container3 .item3 {
  grid-area: c;
  /* grid-column: 5 / -1; */
}
.container3 .item4 {
  grid-area: f;
  /* grid-column: 1 / -1; */
}

.container-exp {
  display: grid;
  grid-template: 70px 200px 70px / repeat(12, 1fr);
}
.container-exp .item1 {
  grid-column: 1 / 9;
}
.container-exp .item2 {
  grid-column: 9 / -1;
  grid-row: 1 / 3;
}
.container-exp .item3 {
  grid-column: 1 / 9;
}
.container-exp .item4 {
  grid-column: 1 / -1;
}

.container4 {
  display: grid;
  grid-auto-rows: 300px;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
}

.container-gall {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
  grid-auto-rows: 70px;
  grid-auto-flow: dense;
}
.container-gall .wide {
  /* we can write this: */
  grid-column: span 2;
  /* instead of the following:
  grid-column: auto / span 2; */
}
.container-gall .big {
  grid-area: span 2 / span 2;
}

.container5 {
  display: grid;
  height: 700px;

  grid-template-columns:
  [main-start header-start footer-start menu-start]
  repeat(4, 1fr) [menu-end content-start] repeat(8, 1fr)
  [content-end main-end header-end footer-end];

  grid-template-rows: [header-start]
  100px [header-end menu-start content-start]
  1fr [menu-end content-end] 100px;
}
.container5 .item1 {
  /* we can write grid-area like this because the lines around header are called:
  header-start (top) header-end (bottom) and header-start(left) header-end(right) */
  grid-area: header;

  /* we could also write it like this:
  grid-row: header;
  grid-column: header; */
}
.container5 .item2 {
  /* we could also have written:
  grid-column: menu;
  grid-row: menu; */
  grid-area: menu;
}
.container5 .item3 {
  grid-area: content;
}
.container5 .item4 {
  /* do note that we can't write like this:
    grid-area: footer;
  because footer isn't boxed in (that is it doesn't have footer-start / footer-end
  on top / bottom as well as footer-start / footer-end on left / right but instead it has
  _only_ footer-start / footer-end only on left / right but not on bottom / top */
  /* so shorthand only vertically */
  grid-column: footer;
}

.diff {
  max-width: 80%;
  margin: 1rem auto;
}
.container-diff-fill {
  border: 1px solid #000;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  grid-auto-rows: 100px;
}
.container-diff-fit {
  border: 1px solid #000;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  grid-auto-rows: 100px;
}

/* fill creates implicit cells whilst fit will stretch the existing ones if it
  is allowed to (for instance it isn't allowed if we were to write just 100px instead
  of minmax(100px, 1fr) */

/* so the golden algorithm would be to set grid-template-columns and, unless
necessary to do otherwise, give preference to auto-rows, after that it is also
possible to use grid-template-areas to make things simpler; if you have elements
with a fixed width and you need to fit as many of them as you need use repeat(auto-fit, minmax) */
